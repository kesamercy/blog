# How much have customers paid you?

## Why I'm Writing This

A month ago we started our first pilot towards building a no-code platform that helps non-tech founders build their own software products. I'm a computer scientist who has worked in startups across USA, Uganda and now Australia - as an intern, researcher, and founder who built and grew my company to 7000 users bootstrapping. Now I'm building my second company because everyone always asked me "can you build me an app for my X business?" I didn't want to become a dev agency so I decided to build a system that helps you build your apps.

Since launching our pilot, I've spoken with about 20 founders. Here's what keeps happening when we talk about MVP scope.

## The Conversation About MVP Scope

MVP scoping becomes a point of contention because founders believe they need to launch with more features than I suggest. Whatever I suggest feels too small to them. 

Founders feel if they don't have login functionality, users can't save their work. Without a dashboard, they can't see their progress. Without analytics, they can't prove this is working. If they launch with just one piece, it's going to look unprofessional and nobody will pay for something that feels incomplete.

I get why they think this way. They're nervous because they feel like if they don't have a complete, exceptional solution, then nobody will pay for it.

But the reality is your customers don't see the complete solution you have in your mind. Customers see their day-to-day problem. Even if you only solved one part of the big problem and solved it really well, they're often willing to trust you more because right now they have NO solution at all.

For them, worst case scenario is 1% of their problem goes away, which is still way better than their current situation. Most times when founders insist on expanding the scope, I ask: "How much have customers paid you?"

If the answer is zero, then here's the logic: from a technical perspective, you have way more to lose building more than building less.

## What No Payment Actually Tells Us

When customers haven't paid yet, you're building based on your logical assumptions about the solution. You believe your solution makes sense because you deeply understand the problem. And you're willing to take the risk of building 10 features because it feels like the logical answer.

But here's what I've learned: users don't always experience our solutions the way we imagine they will.

Think about it this way - if you had no app and people were paying you to solve their problem manually, you'd learn really fast how they actually want that solution delivered. You'd see exactly what they value, what frustrates them, and what they're willing to pay for.

As much as you understand the problem, your customer is the expert at the solution. You only know the expert is happy when they're willing to pay. If they aren't, then more work still needs to be done.

So when customers haven't paid anything yet, building 10 features isn't reducing your risk - it's delaying the moment when you learn what they'll actually pay for. You're betting more money and time on your assumptions instead of letting paying customers teach you what the solution should actually look like.

The founder journey is challenging even under ideal conditions. But there's a specific type of setback that can end the journey prematurely: discovering that your target customer segment won't pay for your solution after you've already invested months building a comprehensive product. This isn't just about wasted money - it's about emotional capital and having to restart your customer discovery.

Testing payment willingness with a small, focused solution gives you this information when the stakes are lower. If they won't pay for the core value, you learn about your market positioning without burning through months of development time. If they do pay, you have validation to build confidently in the direction they guide you.

## When You've Already Promised the Complete Solution

Some founders push back saying: "I already described how it will work for them and they said they'll pay for it. I need to deliver what I promised, not a small scope."

But here's the challenge: as a non-tech founder, you're completely out of control of the delivery timeline. Larger scope means more ways the timeline can go wrong, more features that can break, more complexity that slows everything down.

Even in the best case scenario, you might deliver 30% of everything - but 30% isn't good enough for customers to pay. By the time you finally deliver the full scope, they may have found other solutions or simply lost interest entirely.

Building the core feature first and delivering it quickly is actually the best way to keep your promise and maintain their trust while you build the rest. If they're truly committed to paying for the complete solution, they'll definitely pay for the piece that delivers the main value.

## How to Actually Scope When You Have No Payment Validation

So if customers haven't paid yet, how do you scope responsibly? This is where most founders get MVP wrong.

Most people think MVP means building a cheap version of their complete product. They build 30% of everything - a basic user system, rudimentary features, minimal functionality - hoping that users will see the "potential" and provide feedback.

This approach creates products that feel unfinished, deliver weak value propositions, and struggle to generate meaningful validation because no individual component provides complete value.

Here's how to think about it differently: instead of building 30% of everything, build 100% of something small.

For example, instead of building login + basic dashboard + simple analytics, build one exceptional reporting feature that solves a complete workflow. Instead of a basic project management tool with limited features, build one perfect task automation that eliminates a specific daily frustration.

Customers actually prefer one thing that works perfectly over ten things that work poorly. They don't see your complete vision in your mind - they see their immediate problem and whether you solved it well.

The key question becomes: "Would customers pay for this feature if it was the only thing we built?" This constraint forces you to define features that deliver complete, standalone value rather than partial solutions that only work when bundled together.

When you scope this way, you can test payment willingness quickly and iterate based on real customer behavior. You're not betting everything on customers accepting your complete vision - you're testing one valuable piece at a time, letting paying customers guide you to what they need next.

## Why This Approach Sets You Up for Technical Success

Customers don't pay for features - they pay for flawless execution of solutions that solve their problems really well. From a technical perspective, achieving flawless execution requires iteration and time.

When you build 10 interconnected features, user feedback becomes your enemy instead of your friend. When users want Feature A changed (and they will), that change often breaks or requires updates to Features B, C, and D. What should be a simple improvement becomes a complex project touching multiple parts of your system.

This makes iteration cycles painfully slow. Each change requires testing all the interconnected parts to make sure nothing else broke. Instead of quickly responding to user feedback - which is how you achieve the flawless execution customers pay for - you're stuck in lengthy development cycles just to make basic improvements.

For non-tech founders, this creates a particularly brutal equation. You're paying for development from day one, which means you're losing money from the moment you start building. If you build one feature to flawless execution, you can start generating revenue and learning from real usage relatively quickly. If you build 10 features that can't be easily improved based on feedback, you might run out of budget before any of them work well enough for customers to pay.

## What Actually Works

The approach that actually works feels counterintuitive because it goes against our instinct to solve the whole problem:

Get idea → build the smallest version that addresses the core issue → find someone willing to pay for it → ask what they need next → build that → repeat.

This feels risky because you're launching something incomplete. But it's actually less risky because you're testing payment willingness early, finding the real buyer before investing heavily, and learning what customers actually value through their payment behavior.

Here's why payment creates different feedback than conversations: when someone pays for your solution, they're making a trade-off decision. They're weighing your solution against everything else they could spend money on, including doing nothing. This cuts through social politeness, through wanting to be helpful, through hypothetical thinking. It reveals actual prioritization and genuine willingness to change their current process.

The hardest part isn't technical - it's emotional. Building this way means accepting that your complete vision might not be what customers want to pay for first. It means being willing to let payment behavior reshape your solution roadmap.

But here's the reframe: customers paying for and guiding your solution evolution isn't a failure of your vision - it's validation that you built something valuable enough for them to invest in improving. They're not rejecting your expertise; they're showing you how to apply it in ways that create real value they'll pay for.

## What This Means Practically

If customers haven't paid you anything yet, you don't know which features they value enough to spend money on. In that situation, you're better off risking one feature than risking ten.

Once someone pays for your core functionality, you have evidence that this customer segment values your approach enough to spend money on it. Then you can build additional features with confidence, guided by paying customers who have skin in the game.

The goal isn't to avoid building comprehensive solutions. It's to build them in an order that's validated by people willing to pay for each step, so you find the right buyers early and avoid burnout from building elaborate solutions for people who won't ultimately pay.